// <auto-generated />
using System;
using BookApp.DataAccessLayer.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BookApp.DataAccessLayer.Migrations
{
    [DbContext(typeof(BookContext))]
    [Migration("20240702161908_mig1")]
    partial class mig1
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.31")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("BookApp.EntityLayer.Concrete.Book", b =>
                {
                    b.Property<int>("BookId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BookId"), 1L, 1);

                    b.Property<string>("Author")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ShelfLocationId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("BookId");

                    b.HasIndex("ShelfLocationId");

                    b.ToTable("Books");
                });

            modelBuilder.Entity("BookApp.EntityLayer.Concrete.BookNote", b =>
                {
                    b.Property<int>("BookNoteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BookNoteId"), 1L, 1);

                    b.Property<int>("BookId")
                        .HasColumnType("int");

                    b.Property<bool>("IsShared")
                        .HasColumnType("bit");

                    b.Property<string>("NoteText")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("BookNoteId");

                    b.HasIndex("BookId");

                    b.ToTable("BookNotes");
                });

            modelBuilder.Entity("BookApp.EntityLayer.Concrete.Order", b =>
                {
                    b.Property<int>("OrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrderId"), 1L, 1);

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2");

                    b.HasKey("OrderId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("BookApp.EntityLayer.Concrete.OrderItem", b =>
                {
                    b.Property<int>("OrderItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrderItemId"), 1L, 1);

                    b.Property<int>("BookId")
                        .HasColumnType("int");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("OrderItemId");

                    b.HasIndex("BookId");

                    b.HasIndex("OrderId");

                    b.ToTable("OrderItems");
                });

            modelBuilder.Entity("BookApp.EntityLayer.Concrete.SharedNote", b =>
                {
                    b.Property<int>("SharedNoteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SharedNoteId"), 1L, 1);

                    b.Property<int>("BookNoteId")
                        .HasColumnType("int");

                    b.Property<string>("PrivacySetting")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SharedNoteId");

                    b.HasIndex("BookNoteId");

                    b.ToTable("SharedNotes");
                });

            modelBuilder.Entity("BookApp.EntityLayer.Concrete.ShelfLocation", b =>
                {
                    b.Property<int>("ShelfLocationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ShelfLocationId"), 1L, 1);

                    b.Property<string>("LocationDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ShelfLocationId");

                    b.ToTable("ShelfLocations");
                });

            modelBuilder.Entity("BookApp.EntityLayer.Concrete.Book", b =>
                {
                    b.HasOne("BookApp.EntityLayer.Concrete.ShelfLocation", "ShelfLocation")
                        .WithMany("Books")
                        .HasForeignKey("ShelfLocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ShelfLocation");
                });

            modelBuilder.Entity("BookApp.EntityLayer.Concrete.BookNote", b =>
                {
                    b.HasOne("BookApp.EntityLayer.Concrete.Book", "Book")
                        .WithMany("BookNotes")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");
                });

            modelBuilder.Entity("BookApp.EntityLayer.Concrete.OrderItem", b =>
                {
                    b.HasOne("BookApp.EntityLayer.Concrete.Book", "Book")
                        .WithMany("OrderItems")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BookApp.EntityLayer.Concrete.Order", "Order")
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("BookApp.EntityLayer.Concrete.SharedNote", b =>
                {
                    b.HasOne("BookApp.EntityLayer.Concrete.BookNote", "BookNote")
                        .WithMany("SharedNotes")
                        .HasForeignKey("BookNoteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BookNote");
                });

            modelBuilder.Entity("BookApp.EntityLayer.Concrete.Book", b =>
                {
                    b.Navigation("BookNotes");

                    b.Navigation("OrderItems");
                });

            modelBuilder.Entity("BookApp.EntityLayer.Concrete.BookNote", b =>
                {
                    b.Navigation("SharedNotes");
                });

            modelBuilder.Entity("BookApp.EntityLayer.Concrete.Order", b =>
                {
                    b.Navigation("OrderItems");
                });

            modelBuilder.Entity("BookApp.EntityLayer.Concrete.ShelfLocation", b =>
                {
                    b.Navigation("Books");
                });
#pragma warning restore 612, 618
        }
    }
}
